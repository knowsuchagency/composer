{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Orkestra # What is Orkestra? # Orkestra is a lightweight framework that leverages the AWS Cloud Development Kit (CDK) , Lambda , and Step Functions to provide a seamless way of building observable cloud-native workflows. It aims to bring a similar development experience to that of Airflow while leveraging the full power of AWS. Features # simple intuitive developer experience scheduled (ETL) workflows event-driven workflows simplified local testing natively integrated with AWS cost-effective highly scalable Example # examples/hello_orkestra.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 import random from typing import * from uuid import uuid4 from aws_lambda_powertools import Logger , Tracer from pydantic import BaseModel from orkestra import compose from orkestra.interfaces import Duration class Item ( BaseModel ): id : str name : str price : Optional [ float ] = None @classmethod def random ( cls ): return cls ( id = str ( uuid4 ()), name = random . choice ( [ \"potato\" , \"moon rock\" , \"hat\" , ] ), ) logger = Logger () tracer = Tracer () default_args = dict ( enable_powertools = True , timeout = Duration . seconds ( 6 ), ) @compose ( ** default_args ) def generate_item ( event , context ): logger . info ( \"generating random item\" ) item = Item . random () . dict () logger . info ( item ) tracer . put_metadata ( \"GenerateItem\" , \"SUCCESS\" ) return item @compose ( model = Item , ** default_args ) def add_price ( item : Item , context ): price = 3.14 logger . info ( \"adding price to item\" , extra = { \"item\" : item . dict (), \"price\" : price } ) item . price = price return item . dict () @compose ( model = Item , ** default_args ) def copy_item ( item : Item , context ) -> list : logger . info ( item . dict ()) return [ item . dict ()] * 10 @compose ( model = Item , is_map_job = True , ** default_args ) def double_price ( item : Item , context ): item . price = item . price * 2 return item . dict () @compose ( ** default_args ) def assert_false ( event , context ): assert False @compose ( ** default_args ) def do_nothing ( event , context ): logger . info ({ \"doing\" : \"nothing\" }) @compose ( ** default_args ) def say_hello ( event , context ): return \"hello, world\" @compose ( ** default_args ) def say_goodbye ( event , context ): return \"goodbye\" @compose ( ** default_args ) def random_int ( event , context ): return random . randrange ( 100 ) @compose ( ** default_args ) def random_float ( event , context ): return float ( random_int ( event , context )) ( generate_item >> add_price >> copy_item >> double_price >> ( do_nothing , assert_false ) >> say_hello >> [ random_int , random_float ] >> say_goodbye ) app.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from aws_cdk import core as cdk from examples.hello_orkestra import generate_item class HelloOrkestra ( cdk . Stack ): def __init__ ( self , scope , id , ** kwargs ): super () . __init__ ( scope , id , ** kwargs ) generate_item . schedule ( self , expression = \"rate(5 minutes)\" , state_machine_name = \"hello_orkestra\" , ) app = cdk . App () HelloOrkestra ( app , \"helloOrkestra\" ) test_hello_orkestra.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 from dataclasses import dataclass import pytest from examples.hello_orkestra import ( generate_item , add_price , copy_item , double_price , Item , assert_false , do_nothing , say_hello , say_goodbye , random_int , random_float , ) @pytest . fixture def context (): @dataclass class LambdaContext : function_name : str = \"test\" memory_limit_in_mb : int = 128 invoked_function_arn : str = ( \"arn:aws:lambda:eu-west-1:809313241:function:test\" ) aws_request_id : str = \"52fdfc07-2182-154f-163f-5f0f9a621d72\" return LambdaContext () @pytest . fixture def item (): return Item . random () . dict () class TestMethods : @staticmethod def test_generate_item ( item , context ): generated = generate_item ( item , context ) assert Item ( ** generated ) @staticmethod def test_add_price ( item , context ): result = add_price ( item , context ) assert result [ \"price\" ] @staticmethod def test_copy_item ( item , context ): result = copy_item ( item , context ) assert all ( i == item for i in result ) @staticmethod def test_double_price ( item , context ): item [ \"price\" ] = 1 result = double_price ( item , context ) assert result [ \"price\" ] == item [ \"price\" ] * 2 @staticmethod def test_assert_false ( item , context ): with pytest . raises ( AssertionError ): assert_false ( item , context ) @staticmethod def test_do_nothing ( item , context ): assert do_nothing ( item , context ) is None @staticmethod def test_say_hello ( item , context ): assert say_hello ( item , context ) @staticmethod def test_goodbye ( item , context ): assert say_goodbye ( item , context ) @staticmethod def test_random_int ( item , context ): result = random_int ( item , context ) assert isinstance ( result , int ) @staticmethod def test_random_float ( item , context ): result = random_float ( item , context ) assert isinstance ( result , float ) state machine xray","title":"Home"},{"location":"#orkestra","text":"","title":"Orkestra"},{"location":"#what-is-orkestra","text":"Orkestra is a lightweight framework that leverages the AWS Cloud Development Kit (CDK) , Lambda , and Step Functions to provide a seamless way of building observable cloud-native workflows. It aims to bring a similar development experience to that of Airflow while leveraging the full power of AWS.","title":"What is Orkestra?"},{"location":"#features","text":"simple intuitive developer experience scheduled (ETL) workflows event-driven workflows simplified local testing natively integrated with AWS cost-effective highly scalable","title":"Features"},{"location":"#example","text":"examples/hello_orkestra.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 import random from typing import * from uuid import uuid4 from aws_lambda_powertools import Logger , Tracer from pydantic import BaseModel from orkestra import compose from orkestra.interfaces import Duration class Item ( BaseModel ): id : str name : str price : Optional [ float ] = None @classmethod def random ( cls ): return cls ( id = str ( uuid4 ()), name = random . choice ( [ \"potato\" , \"moon rock\" , \"hat\" , ] ), ) logger = Logger () tracer = Tracer () default_args = dict ( enable_powertools = True , timeout = Duration . seconds ( 6 ), ) @compose ( ** default_args ) def generate_item ( event , context ): logger . info ( \"generating random item\" ) item = Item . random () . dict () logger . info ( item ) tracer . put_metadata ( \"GenerateItem\" , \"SUCCESS\" ) return item @compose ( model = Item , ** default_args ) def add_price ( item : Item , context ): price = 3.14 logger . info ( \"adding price to item\" , extra = { \"item\" : item . dict (), \"price\" : price } ) item . price = price return item . dict () @compose ( model = Item , ** default_args ) def copy_item ( item : Item , context ) -> list : logger . info ( item . dict ()) return [ item . dict ()] * 10 @compose ( model = Item , is_map_job = True , ** default_args ) def double_price ( item : Item , context ): item . price = item . price * 2 return item . dict () @compose ( ** default_args ) def assert_false ( event , context ): assert False @compose ( ** default_args ) def do_nothing ( event , context ): logger . info ({ \"doing\" : \"nothing\" }) @compose ( ** default_args ) def say_hello ( event , context ): return \"hello, world\" @compose ( ** default_args ) def say_goodbye ( event , context ): return \"goodbye\" @compose ( ** default_args ) def random_int ( event , context ): return random . randrange ( 100 ) @compose ( ** default_args ) def random_float ( event , context ): return float ( random_int ( event , context )) ( generate_item >> add_price >> copy_item >> double_price >> ( do_nothing , assert_false ) >> say_hello >> [ random_int , random_float ] >> say_goodbye ) app.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from aws_cdk import core as cdk from examples.hello_orkestra import generate_item class HelloOrkestra ( cdk . Stack ): def __init__ ( self , scope , id , ** kwargs ): super () . __init__ ( scope , id , ** kwargs ) generate_item . schedule ( self , expression = \"rate(5 minutes)\" , state_machine_name = \"hello_orkestra\" , ) app = cdk . App () HelloOrkestra ( app , \"helloOrkestra\" ) test_hello_orkestra.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 from dataclasses import dataclass import pytest from examples.hello_orkestra import ( generate_item , add_price , copy_item , double_price , Item , assert_false , do_nothing , say_hello , say_goodbye , random_int , random_float , ) @pytest . fixture def context (): @dataclass class LambdaContext : function_name : str = \"test\" memory_limit_in_mb : int = 128 invoked_function_arn : str = ( \"arn:aws:lambda:eu-west-1:809313241:function:test\" ) aws_request_id : str = \"52fdfc07-2182-154f-163f-5f0f9a621d72\" return LambdaContext () @pytest . fixture def item (): return Item . random () . dict () class TestMethods : @staticmethod def test_generate_item ( item , context ): generated = generate_item ( item , context ) assert Item ( ** generated ) @staticmethod def test_add_price ( item , context ): result = add_price ( item , context ) assert result [ \"price\" ] @staticmethod def test_copy_item ( item , context ): result = copy_item ( item , context ) assert all ( i == item for i in result ) @staticmethod def test_double_price ( item , context ): item [ \"price\" ] = 1 result = double_price ( item , context ) assert result [ \"price\" ] == item [ \"price\" ] * 2 @staticmethod def test_assert_false ( item , context ): with pytest . raises ( AssertionError ): assert_false ( item , context ) @staticmethod def test_do_nothing ( item , context ): assert do_nothing ( item , context ) is None @staticmethod def test_say_hello ( item , context ): assert say_hello ( item , context ) @staticmethod def test_goodbye ( item , context ): assert say_goodbye ( item , context ) @staticmethod def test_random_int ( item , context ): result = random_int ( item , context ) assert isinstance ( result , int ) @staticmethod def test_random_float ( item , context ): result = random_float ( item , context ) assert isinstance ( result , float ) state machine xray","title":"Example"},{"location":"development/","text":"\ud83d\udea7 WIP #","title":"Development"},{"location":"development/#wip","text":"","title":"\ud83d\udea7 WIP"},{"location":"tutorial/","text":"Creating a new CDK project # In order to use Orkestra, you'll need a CDK project to define your infrastructure as code (IAC). 1 2 3 4 5 6 7 8 9 10 11 # make sure you have the aws CDK installed npm install -g aws-cdk mkdir hello_orkestra cd hello_orkestra # this command creates a project scaffold and virtual environment cdk init -l python You should now have a folder structure like the following 1 2 3 4 5 6 7 8 9 10 11 12 13 \u276f tree . \u251c\u2500\u2500 README.md \u251c\u2500\u2500 app.py \u251c\u2500\u2500 cdk.json \u251c\u2500\u2500 hello_orkestra \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 hello_orkestra_stack.py \u251c\u2500\u2500 requirements.txt \u251c\u2500\u2500 setup.py \u2514\u2500\u2500 source.bat 1 directory, 8 files Installing Orkestra # Add orkestra to your requirements. requirements.txt 1 2 -e . orkestra[cdk,powertools]>=0.4.3 Activate the virtual environment and install Orkestra. 1 2 3 . .venv/bin/activate pip install -r requirements.txt Warning The rest of the tutorial will assume you have the virtual environment activated Note You'll notice we installed the cdk optional dependency. The cdk dependencies are so we can synthesize our constructs to cloudformation. Creating our first workflow # Scaffolding # Create a folder for your lambdas and populate it with a module and a requirements.txt that references orkestra as a dependency. 1 2 3 4 5 mkdir lambdas touch lambdas/main.py echo \"orkestra>=0.4.3\" >> lambdas/requirements.txt Note The packages in requirements.txt file will get installed on the lambda. Our lambda won't need to build anything with the cdk, so no need for that optional dependency. Adding Business Logic # Add some functions to our main.py module and import the head function (say_hello) in our IAC. main.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 from orkestra import compose @compose def say_hello ( event , context ): return \"hello, world\" @compose def uppercase ( event : str , context ): return event . upper () @compose def double ( event , context ): return event * 2 @compose def say_goodbye ( event , context ): return \"goodbye\" say_hello >> [ uppercase , double ] >> say_goodbye Defining our Infrastructure As Code # hello_orkestra/hello_orkestra_stack.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from aws_cdk import core as cdk from lambdas.main import say_hello class HelloOrkestraStack ( cdk . Stack ): def __init__ ( self , scope : cdk . Construct , construct_id : str , ** kwargs ) -> None : super () . __init__ ( scope , construct_id , ** kwargs ) say_hello . schedule ( self , expression = \"rate(5 minutes)\" , state_machine_name = \"say_hello\" , ) Info The schedule method of our function takes care of a lot of boilerplate for us. Under-the-hood, it... defines the IAC for our lambda functions chains them together in a step function state machine sets that state machine to be triggered by an EventBridge (CloudWatch) event at the interval we set Testing # Since Orkestra works by simply decorating normal Python functions, you are encouraged to compose your business logic in terms of discrete functions that (hopefully) better lend themselves to local unit testing. Install test requirements # requirements.txt 1 2 3 -e . orkestra[cdk,powertools]>=0.4.3 pytest 1 pip install -r requirements.txt Create test module # 1 touch lambdas/test_main.py lambdas/test_main.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import pytest from main import say_hello , uppercase , double , say_goodbye @pytest . fixture def event (): return {} @pytest . fixture def context (): return None def test_say_hello ( event , context ): assert say_hello ( event , context ) def test_uppercase ( event , context ): event = say_hello ( event , context ) assert uppercase ( event , context ) def test_double ( event , context ): event = say_hello ( event , context ) assert double ( event , context ) def test_goodbye ( event , context ): assert say_goodbye ( event , context ) Run Tests # 1 2 3 4 5 6 7 8 9 10 orkestra/hello_orkestra on \ue0a0 main [ !? ] via \ud83d\udc0d v3.9.5 ( .venv ) on \u2601\ufe0f ( us-east-2 ) \u276f pytest lambdas/test_main.py =================================== test session starts ==================================== platform darwin -- Python 3 .9.5, pytest-6.2.4, py-1.10.0, pluggy-0.13.1 rootdir: ..., configfile: pyproject.toml collected 4 items lambdas/test_main.py .... [ 100 % ] ==================================== 4 passed in 0 .02s ===================================== Deployment # We're now ready to deploy our workflow to AWS. The aws cdk cli works similarly to other programmatic AWs clients in that it will respect environment variables like AWS_PROFILE AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY in order know which AWS account to deploy to and to authenticate with AWS. Bootstrap # Warning If this is our first cdk deployment, we will likely need to boostrap it. 1 cdk bootstrap full boostrapping instructions docs.aws.amazon.com/cdk/latest/guide/bootstrapping.html cdk cli api reference docs.aws.amazon.com/cdk/latest/guide/cli.html Deploy # 1 cdk deploy Success \ud83c\udf89 Congratulations \ud83c\udf89 You've successfully deployed your first Orkestra project \ud83d\ude03","title":"Tutorial"},{"location":"tutorial/#creating-a-new-cdk-project","text":"In order to use Orkestra, you'll need a CDK project to define your infrastructure as code (IAC). 1 2 3 4 5 6 7 8 9 10 11 # make sure you have the aws CDK installed npm install -g aws-cdk mkdir hello_orkestra cd hello_orkestra # this command creates a project scaffold and virtual environment cdk init -l python You should now have a folder structure like the following 1 2 3 4 5 6 7 8 9 10 11 12 13 \u276f tree . \u251c\u2500\u2500 README.md \u251c\u2500\u2500 app.py \u251c\u2500\u2500 cdk.json \u251c\u2500\u2500 hello_orkestra \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 hello_orkestra_stack.py \u251c\u2500\u2500 requirements.txt \u251c\u2500\u2500 setup.py \u2514\u2500\u2500 source.bat 1 directory, 8 files","title":"Creating a new CDK project"},{"location":"tutorial/#installing-orkestra","text":"Add orkestra to your requirements. requirements.txt 1 2 -e . orkestra[cdk,powertools]>=0.4.3 Activate the virtual environment and install Orkestra. 1 2 3 . .venv/bin/activate pip install -r requirements.txt Warning The rest of the tutorial will assume you have the virtual environment activated Note You'll notice we installed the cdk optional dependency. The cdk dependencies are so we can synthesize our constructs to cloudformation.","title":"Installing Orkestra"},{"location":"tutorial/#creating-our-first-workflow","text":"","title":"Creating our first workflow"},{"location":"tutorial/#scaffolding","text":"Create a folder for your lambdas and populate it with a module and a requirements.txt that references orkestra as a dependency. 1 2 3 4 5 mkdir lambdas touch lambdas/main.py echo \"orkestra>=0.4.3\" >> lambdas/requirements.txt Note The packages in requirements.txt file will get installed on the lambda. Our lambda won't need to build anything with the cdk, so no need for that optional dependency.","title":"Scaffolding"},{"location":"tutorial/#adding-business-logic","text":"Add some functions to our main.py module and import the head function (say_hello) in our IAC. main.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 from orkestra import compose @compose def say_hello ( event , context ): return \"hello, world\" @compose def uppercase ( event : str , context ): return event . upper () @compose def double ( event , context ): return event * 2 @compose def say_goodbye ( event , context ): return \"goodbye\" say_hello >> [ uppercase , double ] >> say_goodbye","title":"Adding Business Logic"},{"location":"tutorial/#defining-our-infrastructure-as-code","text":"hello_orkestra/hello_orkestra_stack.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 from aws_cdk import core as cdk from lambdas.main import say_hello class HelloOrkestraStack ( cdk . Stack ): def __init__ ( self , scope : cdk . Construct , construct_id : str , ** kwargs ) -> None : super () . __init__ ( scope , construct_id , ** kwargs ) say_hello . schedule ( self , expression = \"rate(5 minutes)\" , state_machine_name = \"say_hello\" , ) Info The schedule method of our function takes care of a lot of boilerplate for us. Under-the-hood, it... defines the IAC for our lambda functions chains them together in a step function state machine sets that state machine to be triggered by an EventBridge (CloudWatch) event at the interval we set","title":"Defining our Infrastructure As Code"},{"location":"tutorial/#testing","text":"Since Orkestra works by simply decorating normal Python functions, you are encouraged to compose your business logic in terms of discrete functions that (hopefully) better lend themselves to local unit testing.","title":"Testing"},{"location":"tutorial/#install-test-requirements","text":"requirements.txt 1 2 3 -e . orkestra[cdk,powertools]>=0.4.3 pytest 1 pip install -r requirements.txt","title":"Install test requirements"},{"location":"tutorial/#create-test-module","text":"1 touch lambdas/test_main.py lambdas/test_main.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import pytest from main import say_hello , uppercase , double , say_goodbye @pytest . fixture def event (): return {} @pytest . fixture def context (): return None def test_say_hello ( event , context ): assert say_hello ( event , context ) def test_uppercase ( event , context ): event = say_hello ( event , context ) assert uppercase ( event , context ) def test_double ( event , context ): event = say_hello ( event , context ) assert double ( event , context ) def test_goodbye ( event , context ): assert say_goodbye ( event , context )","title":"Create test module"},{"location":"tutorial/#run-tests","text":"1 2 3 4 5 6 7 8 9 10 orkestra/hello_orkestra on \ue0a0 main [ !? ] via \ud83d\udc0d v3.9.5 ( .venv ) on \u2601\ufe0f ( us-east-2 ) \u276f pytest lambdas/test_main.py =================================== test session starts ==================================== platform darwin -- Python 3 .9.5, pytest-6.2.4, py-1.10.0, pluggy-0.13.1 rootdir: ..., configfile: pyproject.toml collected 4 items lambdas/test_main.py .... [ 100 % ] ==================================== 4 passed in 0 .02s =====================================","title":"Run Tests"},{"location":"tutorial/#deployment","text":"We're now ready to deploy our workflow to AWS. The aws cdk cli works similarly to other programmatic AWs clients in that it will respect environment variables like AWS_PROFILE AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY in order know which AWS account to deploy to and to authenticate with AWS.","title":"Deployment"},{"location":"tutorial/#bootstrap","text":"Warning If this is our first cdk deployment, we will likely need to boostrap it. 1 cdk bootstrap full boostrapping instructions docs.aws.amazon.com/cdk/latest/guide/bootstrapping.html cdk cli api reference docs.aws.amazon.com/cdk/latest/guide/cli.html","title":"Bootstrap"},{"location":"tutorial/#deploy","text":"1 cdk deploy Success \ud83c\udf89 Congratulations \ud83c\udf89 You've successfully deployed your first Orkestra project \ud83d\ude03","title":"Deploy"},{"location":"examples/single_lambda/","text":"\ud83d\udea7 WIP #","title":"single lambda"},{"location":"examples/single_lambda/#wip","text":"","title":"\ud83d\udea7 WIP"}]}